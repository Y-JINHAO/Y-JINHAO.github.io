<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白醭飙尘</title>
  <icon>https://www.gravatar.com/avatar/2434e38e62010b30d97a1762f7127164</icon>
  
  <link href="https://y-jinhao.github.io/atom.xml" rel="self"/>
  
  <link href="https://y-jinhao.github.io/"/>
  <updated>2021-04-06T11:25:55.351Z</updated>
  <id>https://y-jinhao.github.io/</id>
  
  <author>
    <name>Y-JINHAO</name>
    <email>1748098482@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS中创建对象的四种常见方法</title>
    <link href="https://y-jinhao.github.io/2021/04/06/JS-Obeject/"/>
    <id>https://y-jinhao.github.io/2021/04/06/JS-Obeject/</id>
    <published>2021-04-06T11:21:40.000Z</published>
    <updated>2021-04-06T11:25:55.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一-对象字面量"><a href="#一-对象字面量" class="headerlink" title="一 对象字面量"></a>一 对象字面量</h3><p>对象字面量就是一个 {}，里面的属性和方法均是 key : value 键值对。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> teacher = &#123;</span><br><span class="line">    name:<span class="string">&#x27;扶桑&#x27;</span>,</span><br><span class="line">    age:<span class="number">27</span>,</span><br><span class="line">    school:<span class="string">&#x27;神木中学&#x27;</span>,</span><br><span class="line">    teach:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name +<span class="string">&#x27;教语文&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-工厂模式"><a href="#二-工厂模式" class="headerlink" title="二 工厂模式"></a>二 工厂模式</h3><p>上面创建对象的方式是单个单个的，当要创建很多和上面有相同特征对象时，繁琐又耗时间。<br>这时使用工厂模式大批量地创建对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">name,age,course</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> teacher = &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        school: <span class="string">&#x27;太阳中学&#x27;</span>,</span><br><span class="line">        teach:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name +<span class="string">&#x27;教&#x27;</span>+course);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fuSang = Teacher(<span class="string">&#x27;扶桑&#x27;</span>,<span class="number">27</span>,<span class="string">&#x27;语文&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fuSang); <span class="comment">// &#123;name: &quot;扶桑&quot;, age: 27, school: &quot;神木中学&quot;, teach: ƒ&#125;</span></span><br><span class="line"><span class="keyword">let</span> shenMu = Teacher(<span class="string">&#x27;神木&#x27;</span>,<span class="number">26</span>,<span class="string">&#x27;历史&#x27;</span>); <span class="comment">// 可快速创建另一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(shenMu.teach()) <span class="comment">// 神木教历史,undefined</span></span><br></pre></td></tr></table></figure><p> 控制台打印效果：<br><img src="https://img-blog.csdnimg.cn/20210309124713512.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70"></p><h3 id="三-构造函数创建对象"><a href="#三-构造函数创建对象" class="headerlink" title="三 构造函数创建对象"></a>三 构造函数创建对象</h3><p>Object()是浏览器自带的函数对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">name,age,course</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.teach = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>.name +<span class="string">&#x27;教&#x27;</span>+course);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher(<span class="string">&#x27;扶桑&#x27;</span>,<span class="number">27</span>,<span class="string">&#x27;语文&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 扶桑</span></span><br></pre></td></tr></table></figure><p><em>Teacher(‘扶桑’,27,’语文’);</em> 只是普通函数的调用，调用<em>Teacher()</em> 打印 this 的结果是 window 对象。即 this 指向的是 window 对象，并声明了全局的 name、age 变量和 teach 函数，如下图：<br><img src="https://img-blog.csdnimg.cn/20210309125912345.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70"><br>使用 new 创建一个新的对象，将函数内部的 this指向新的对象。构造函数中没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shenMu = <span class="keyword">new</span> Teacher(<span class="string">&#x27;神木&#x27;</span>,<span class="number">26</span>,<span class="string">&#x27;历史&#x27;</span>); </span><br><span class="line"><span class="comment">// this指向新对象 shenMu，打印 this是一个 Teacher对象，指向新对象 shenMu</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher&#123;</span></span><br><span class="line"><span class="comment">    age: 26</span></span><br><span class="line"><span class="comment">    name: &quot;神木&quot;</span></span><br><span class="line"><span class="comment">teach: ƒ ()</span></span><br><span class="line"><span class="comment">    __proto__:</span></span><br><span class="line"><span class="comment">    -constructor: ƒ Teacher(name,age,course) // 用的构造函数 Teacher()创建的对象</span></span><br><span class="line"><span class="comment">        __proto__: Object&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 扶桑</span></span><br><span class="line"><span class="built_in">console</span>.log(shenMu.name); <span class="comment">// 神木</span></span><br></pre></td></tr></table></figure><p>使用构造函数创建对象一般不像上面 Teacher() 那样大批量创建对象，而是会用到原型对象，把构造函数里面的行为封装起来并给到 prototype属性，这样在大量创建对象后减少堆内存占用，下面举例说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,color,game</span>)</span>&#123; </span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.color = color;</span><br><span class="line">          <span class="built_in">this</span>.playGame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.color + <span class="string">&#x27;的&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;喜欢&#x27;</span> + game)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> dogXiaobai = <span class="keyword">new</span> Dog(<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;白色的&#x27;</span>,<span class="string">&#x27;追蝴蝶&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> dogXiaohei = <span class="keyword">new</span> Dog(<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;黑色的&#x27;</span>,<span class="string">&#x27;打架&#x27;</span>); </span><br><span class="line">      <span class="built_in">console</span>.log(dogXiaobai.playGame == dogXiaohei.playGame); <span class="comment">// false </span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      上面两个对象的 playGame是不等的，但是两个对象里面的 playGame函数内容是一样的，每创建一个 Dog对象，堆内存中就多一个 function playGame()&#123;&#125;</span></span><br><span class="line"><span class="comment">      所以想办法让每个对象中的属性是函数的都指向同一个地址，如下</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">var</span> playGame1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 函数是对象，对象是引用的类型，放置的内存地址给到 playGame1</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.color + <span class="string">&#x27;的&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;喜欢&#x27;</span> + game)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span>  <span class="title">Dog1</span>(<span class="params">name,color,game</span>)</span>&#123; </span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.color = color;</span><br><span class="line">          <span class="built_in">this</span>.playGame = playGame1 <span class="comment">// 这里即是把内存地址给 this.playGame，每创建一个 Dog1对象都共用 playGame1函数</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> dogHuahua = <span class="keyword">new</span> Dog1(<span class="string">&#x27;花花&#x27;</span>,<span class="string">&#x27;黄色、白色的&#x27;</span>,<span class="string">&#x27;黏主人&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> dogHuaihui = <span class="keyword">new</span> Dog1(<span class="string">&#x27;灰灰&#x27;</span>,<span class="string">&#x27;灰色的&#x27;</span>,<span class="string">&#x27;吃大黄的饭&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(dogHuahua.playGame == dogHuaihui.playGame); <span class="comment">// true，两个对象的 playGame属性相等，占据的空间减少了</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 一般对象有很多行为，每个行为都像 playGame1 这样单独拎出来声明很不方便，不建议这样使用</span></span><br><span class="line">      <span class="comment">// 而是将一个类都需要用到的方法封装到一个对象上，并将此对象给到构造函数的 prototype属性，这样用此类创建的每个对象都会有这些行为</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Dog2</span>(<span class="params">name,color,game,food</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.color = color;</span><br><span class="line">          <span class="built_in">this</span>.game = game;</span><br><span class="line">          <span class="built_in">this</span>.food = food</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> dogProto = &#123;</span><br><span class="line">          <span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.color + <span class="string">&#x27;的&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;喜欢&#x27;</span> + <span class="built_in">this</span>.game)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;爱吃&#x27;</span> + <span class="built_in">this</span>.food)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;小狗们都爱睡！&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      Dog2.prototype = dogProto;</span><br><span class="line">      <span class="keyword">var</span> dogHuahua = <span class="keyword">new</span> Dog2(<span class="string">&#x27;花花&#x27;</span>,<span class="string">&#x27;黄色、白色的&#x27;</span>,<span class="string">&#x27;黏主人&#x27;</span>,<span class="string">&#x27;火腿肠&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> dogDoudou = <span class="keyword">new</span> Dog2(<span class="string">&#x27;豆豆&#x27;</span>,<span class="string">&#x27;浅白色的&#x27;</span>,<span class="string">&#x27;出去玩&#x27;</span>,<span class="string">&#x27;狗粮&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(dogHuahua.eat()); <span class="comment">// 花花爱吃火腿肠</span></span><br><span class="line">      <span class="built_in">console</span>.log(dogDoudou.eat()); <span class="comment">// 豆豆爱吃狗粮</span></span><br></pre></td></tr></table></figure><h3 id="四-类-class-关键字创建对象（es6）"><a href="#四-类-class-关键字创建对象（es6）" class="headerlink" title="四 类 class 关键字创建对象（es6）"></a>四 类 class 关键字创建对象（es6）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">         <span class="function"><span class="title">constructor</span>(<span class="params">name,age,course</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">this</span>.name = name;</span><br><span class="line">             <span class="built_in">this</span>.age = age;</span><br><span class="line">             <span class="built_in">this</span>.teach = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="built_in">console</span>.log(<span class="built_in">this</span>.name +<span class="string">&#x27;教&#x27;</span>+course);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> fuSang = <span class="keyword">new</span> Teacher(<span class="string">&#x27;扶桑&#x27;</span>,<span class="number">27</span>,<span class="string">&#x27;语文&#x27;</span>); </span><br><span class="line">     <span class="comment">// 类创建出来的对象与构造函数创建的基本一样</span></span><br><span class="line">     <span class="built_in">console</span>.log(fuSang);     </span><br><span class="line">     <span class="comment">/*Teacher &#123;name: &quot;扶桑&quot;, age: 27, teach: ƒ&#125;</span></span><br><span class="line"><span class="comment">         age: 27</span></span><br><span class="line"><span class="comment">         name: &quot;扶桑&quot;</span></span><br><span class="line"><span class="comment">     teach: ƒ ()</span></span><br><span class="line"><span class="comment">     __proto__:</span></span><br><span class="line"><span class="comment">         constructor: class Teacher // 区别在这里显示构造器是类 class,构造函数构造器则是函数 f=</span></span><br><span class="line"><span class="comment">         __proto__: Object </span></span><br><span class="line"><span class="comment">     // */</span></span><br></pre></td></tr></table></figure><p>若对原型对象不熟悉，可以跳转下面的地址学习。</p><blockquote><p><a href="https://www.runoob.com/js/js-object-prototype.html">https://www.runoob.com/js/js-object-prototype.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://y-jinhao.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://y-jinhao.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="Blog" scheme="https://y-jinhao.github.io/tags/Blog/"/>
    
    <category term="HTML" scheme="https://y-jinhao.github.io/tags/HTML/"/>
    
    <category term="JavaScript" scheme="https://y-jinhao.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vue/cli4 项目中配置webpack-bundle-analyzer分析包插件，查找需要优化的文件</title>
    <link href="https://y-jinhao.github.io/2021/04/06/webpack-bundle-analyzer/"/>
    <id>https://y-jinhao.github.io/2021/04/06/webpack-bundle-analyzer/</id>
    <published>2021-04-06T01:38:27.000Z</published>
    <updated>2021-04-07T05:58:44.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-简介及安装"><a href="#1-简介及安装" class="headerlink" title="1 简介及安装"></a>1 简介及安装</h3><p>在安装 <code>webpack-bundle-analyzer</code> 分析包之前，在项目中可以通过 <code>npm list vue</code> 查看项目所使用的 @vue 版本以及运行 <code>vue -V</code> 查看项目所使用的 @vue/cli 版本。</p><p><img src="https://img-blog.csdnimg.cn/20201011143928169.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/2020101114395176.png#pic_center"></p><p>webpack-bundle-analyzer 可视化资源分析工具可以直观地分析打包出的文件有哪些，及它们的大小、占比情况、各文件 <code>Gzipped</code> 后的大小、模块包含关系、依赖项等。</p><p>在终端或 DOS 命令窗口中输入以下的命令行先安装 <code>webpack-bundle-analyzer</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><h3 id="2-修改vue-config-js和-package-json"><a href="#2-修改vue-config-js和-package-json" class="headerlink" title="2 修改vue.config.js和 package.json"></a>2 修改vue.config.js和 package.json</h3><p>文件位置：<br><img src="https://img-blog.csdnimg.cn/20201011142255841.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70#pic_center"></p><h4 id="①vue-config-js"><a href="#①vue-config-js" class="headerlink" title="①vue.config.js"></a>①vue.config.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.use_analyzer) &#123;     <span class="comment">// 分析</span></span><br><span class="line">      config</span><br><span class="line">        .plugin(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class="line">        .use(<span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在修改 package.json 文件之前，先安装  <code>cross-env</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cross-env</span><br></pre></td></tr></table></figure><p>因为像  <code>NODE_ENV = production</code> 这样设置环境变量时，大多数 Windows 命令提示符都会阻塞 ，而 <code>cross-env</code> 使得我们可以使用单个命令，而不必担心为平台正确设置或使用环境变量。</p><h4 id="②package-json"><a href="#②package-json" class="headerlink" title="②package.json"></a>②package.json</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;cross-env use_analyzer=true npm run build&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><code>注意</code> <code>后面的 npm run build 也可以是 npm run dev，就看你是想在运行项目还是打包的时候使用 webpack-bundle-analyzer 分析包了</code></p><h3 id="3-运行分析工具"><a href="#3-运行分析工具" class="headerlink" title="3 运行分析工具"></a>3 运行分析工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run analyzer 或 npm run build</span><br></pre></td></tr></table></figure><p>等待运行成功之后会看到如下面的图（结果太长，截取的图片）所示结果，以及项目中多了 <code>dist</code> 文件夹。<br><img src="https://img-blog.csdnimg.cn/20201011152938846.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201011144433952.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DONE  Build complete. The dist directory is ready to be deployed.</span><br><span class="line">INFO  Check out deployment instructions at https:<span class="comment">//cli.vuejs.org/guide/deployment.html</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在浏览器中打开 <em><a href="http://127.0.0.1:8888/">http://127.0.0.1:8888/</a></em> ：<br><img src="https://img-blog.csdnimg.cn/20201011142923330.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70#pic_center"><br>图中占面积越大的文件，其文件的大小越大，部署到服务器之后，在浏览器中加载的时间越长，点击左上角的像箭头一样的符号可以直接查看各个文件的大小。<br><img src="https://img-blog.csdnimg.cn/20201011142104837.png?x-oss-process=image,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5NzMxOA==,size_16,color_FFFFFF,t_70#pic_center"><br>得到可视化的分析结果之后，接下来就对占比比较大或者依赖程度比较高的文件进行优化了。</p><p>想要深度学习  <code>webpack-bundle-analyzer</code> 可以前往下面的链接：</p><blockquote><p><a href="https://www.npmjs.com/package/webpack-bundle-analyzer">https://www.npmjs.com/package/webpack-bundle-analyzer</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://y-jinhao.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://y-jinhao.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="Blog" scheme="https://y-jinhao.github.io/tags/Blog/"/>
    
    <category term="JavaScript" scheme="https://y-jinhao.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://y-jinhao.github.io/tags/Vue/"/>
    
    <category term="Webpack-bundle-analyzer" scheme="https://y-jinhao.github.io/tags/Webpack-bundle-analyzer/"/>
    
    <category term="Webpack" scheme="https://y-jinhao.github.io/tags/Webpack/"/>
    
    <category term="View UI" scheme="https://y-jinhao.github.io/tags/View-UI/"/>
    
  </entry>
  
  <entry>
    <title>Spiritfarer Note</title>
    <link href="https://y-jinhao.github.io/2021/04/05/Spiritfarer/"/>
    <id>https://y-jinhao.github.io/2021/04/05/Spiritfarer/</id>
    <published>2021-04-05T09:45:13.000Z</published>
    <updated>2021-04-06T11:55:11.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><img src="https://cdn.jsdelivr.net/gh/Y-JINHAO/resources/img/%E4%B8%AD%E6%96%87%E8%AE%BE%E7%BD%AE%E9%A1%B5.png" alt="settings-cn"><br><img src="https://cdn.jsdelivr.net/gh/Y-JINHAO/resources/img/settings-en.png" alt="settings-en"></p><h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><p>thought for a second 想了一会儿</p><p>far from easy 绝不容易    nonetheless 尽管如此    </p><p>Go fetch the stray spirits stranded on the islands 去把滞留在岛上的幽灵找回来</p><p>stray spirits 流浪的灵魂</p><p>falter vi. 衰弱; 衰退; (嗓音)颤抖; 结巴地说; 蹒跚; 犹豫 n. 踌躇; 支吾; 颤抖</p><p>the beacon of eternity 永恒的灯塔    inconvenient adj. 不便的；打扰的    Accustomed to  习惯于</p><p>lint n. 软麻布；线头；棉绒 vi. 飞散出棉线    roller n. [机] 滚筒；[机] 滚轴；辊子；滚转机    </p><p>get rid of 摆脱，除去    sardine n. 沙丁鱼；庸碌无能的人 vt. 使拥挤不堪</p><p>slightly shabby 略显破旧的    deck 甲板    </p><p>anticipated:</p><p>adj. 预期的；期望的 v. 预料（anticipate的过去分词）；盼望</p><p>commandeer vt. 征用；霸占，没收；强取</p><p>wager n. 赌注；赌博；赌物 vi. 打赌 vt. 下赌注</p><p>aboard:</p><p>adv. 在（飞机、火车、船）上；骑在（马）上；（喻）新入伙；（棒球）在垒上 prep. 在 （船或飞机）上</p><p>at any rate 无论如何，至少    allergy n. 过敏症；反感；厌恶    shipwright n. 造船工人，造船木匠</p><p>garbage n. 垃圾；废物    meticulously adv. 细致地；一丝不苟地；拘泥地</p><p>cabin:<br>n. 小屋；客舱；船舱 vt. 把…关在小屋里 vi. 住在小屋里</p><p>Upgrades 升级    Shenanigan n. 恶作剧；诈骗；诡计    cruise 巡航    hesitate 犹豫</p><p>fascinating adj. 迷人的；吸引人的；使人神魂颠倒的 v. 使…着迷；</p><p>overwhelmed：<br>adj. 被压倒的，被淹没的；受宠若惊的，不知所措的<br>v. （情感）难以禁受；压倒，使受打击；使应接不暇；淹没，漫过（overwhelm 的过去式和过去分词）</p><p>rod n. 棒；惩罚；枝条；权力    oyster n. 牡蛎，[无脊椎] 蚝；沉默寡言的人    clutter 杂乱</p><p>dinghy n. 小艇；小船    gloomy adj. 黑暗的；沮丧的；阴郁的     Ark 方舟    loan 贷款</p><p>construction n. 建设；建筑物；解释；造句</p><p>resplendent adj. 光辉的；华丽的</p><p>proper adj. 适当的；本身的；特有的；正派的 adv. 完全地</p><p>in terms of 依据；按照；在…方面；以…措词    functionality 功能    subsequent 后续</p><p>blueprint 蓝图    humidity n. [气象] 湿度；湿气     tolerate vt. 忍受；默许；宽恕</p><p>stiff<br>adj. 呆板的；坚硬的；僵硬的；严厉的；拘谨的；稠的；（价格）高昂的；（酒）烈性的<br>adv. 极其；僵硬地；彻底地 n. 死尸；令人讨厌者；流通票据；劳动者</p><p>absurd adj. 荒谬的；可笑的 n. 荒诞；荒诞作品</p><p>ingredient n. 原料；要素；组成部分 adj. 构成组成部分的</p><p>maritime<br>adj. 海运的，航海的，海事的；近海的，沿海的</p><p>outrageously adv. 凶残地，残暴地    ominous adj. 预兆的；不吉利的</p><p>mythical adj. 神话的；虚构的    majestic adj. 庄严的；宏伟的    raft 筏；救生艇</p><p>navigate 导航    swindle 诈骗</p><p>blatant<br>adj. 喧嚣的；公然的；炫耀的；俗丽的</p><p>chill<br>n. 寒冷；寒意；寒心 adj. 寒冷的；冷漠的；扫兴的 vt. 冷冻，冷藏；使寒心；使感到冷</p><p>psychic<br>adj. 精神的；心灵的；灵魂的；超自然的 n. 灵媒；巫师</p><p>crunch<br>n. 咬碎，咬碎声；扎扎地踏;（突发的）不足，短缺；财政困难；关键时刻<br>vt. 压碎；嘎扎嘎扎的咬嚼；扎扎地踏过 vi. 嘎吱作响地咀嚼；嘎吱嘎吱地踏过</p><p>proficiency n. 精通，熟练    resonate v. 共鸣; 共振</p><p>monument<br>n. 纪念碑；历史遗迹；不朽的作品 vt. 为…树碑    </p><p>merchant 商人</p><p><img src="https://cdn.jsdelivr.net/gh/Y-JINHAO/resources/img/spiritfarer2.jpg" alt="Spiritfarer画面"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Recreation" scheme="https://y-jinhao.github.io/categories/Recreation/"/>
    
    
    <category term="Recreation" scheme="https://y-jinhao.github.io/tags/Recreation/"/>
    
    <category term="English" scheme="https://y-jinhao.github.io/tags/English/"/>
    
    <category term="Blog" scheme="https://y-jinhao.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
